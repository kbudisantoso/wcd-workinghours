<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset name="Custom ruleset"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
	
	<description>Gin Server - PMD Plugin preferences rule set</description>
	
	<exclude-pattern>.*/prototype_classes/.*</exclude-pattern>
	<exclude-pattern>.*/com/iqser/schema/gin/ws.*</exclude-pattern>
	
	<!-- ******************************************************************* -->
	<!-- Activate all relevant PMD rule categories, excluding unwanted rules -->
	<!-- ******************************************************************* -->

	<!-- The Basic ruleset contains a collection of good practices which should be followed.  -->
	<rule ref="rulesets/java/basic.xml"/>
	
	<!-- The Braces ruleset contains rules regarding the use and placement of braces.  -->
	<rule ref="rulesets/java/braces.xml"/>
	
	<!-- The Clone Implementation ruleset contains a collection of rules that find questionable usages of the clone() method.  -->
	<rule ref="rulesets/java/clone.xml"/>
	
	<!-- The Code Size ruleset contains rules that find problems related to code size or complexity.  -->
	<rule ref="rulesets/java/codesize.xml">
		<exclude name="NPathComplexity"/>
		<exclude name="CyclomaticComplexity"/>
		<exclude name="NcssMethodCount"/>
		<exclude name="NcssTypeCount"/>
		<exclude name="NcssConstructorCount"/>
		<exclude name="StdCyclomaticComplexity"/>
		<exclude name="ModifiedCyclomaticComplexity"/>
		<exclude name="TooManyFields"/>
	</rule>
	
	<!-- Rules intended to catch errors related to code comments  -->
	<rule ref="rulesets/java/comments.xml">
		<exclude name="CommentSize"/>
		<exclude name="CommentRequired"/>
	</rule>
	
	<!-- The Controversial ruleset contains rules that, for whatever reason, are considered controversial.  -->
	<rule ref="rulesets/java/controversial.xml">
		<exclude name="AtLeastOneConstructor"/>
		<exclude name="OnlyOneReturn"/>
		<exclude name="DataflowAnomalyAnalysis"/>
		<exclude name="AvoidFinalLocalVariable"/>
		<exclude name="AvoidLiteralsInIfCondition"/>
		<exclude name="UseConcurrentHashMap"/>
		<exclude name="UseObjectForClearerAPI"/>
		<exclude name="CallSuperInConstructor"/>
	</rule>
	
	<!-- Rules which find instances of high or inappropriate coupling between objects and packages.  -->
	<rule ref="rulesets/java/coupling.xml">
		<exclude name="LawOfDemeter"/>
		<exclude name="LoosePackageCoupling"/>
		<exclude name="CouplingBetweenObjects"/>
		<exclude name="ExcessiveImports"/>
	</rule>
	
	<!-- The Design ruleset contains rules that flag suboptimal code implementations. Alternate approaches are suggested.  -->
	<rule ref="rulesets/java/design.xml">
		<exclude name="SwitchStmtsShouldHaveDefault"/>
		<exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
		<exclude name="ConfusingTernary"/>
		<exclude name="SimpleDateFormatNeedsLocale"/>
		<exclude name="ImmutableField"/>
		<exclude name="UseLocaleWithCaseConversions"/>
		<exclude name="AbstractClassWithoutAbstractMethod"/>
		<exclude name="AvoidConstantsInterface"/>
		<exclude name="UnsynchronizedStaticDateFormatter"/>
		<exclude name="GodClass"/>
	</rule>
	
	<!-- The Empty Code ruleset contains rules that find empty statements of any kind (empty method, empty block statement, empty try or catch block,...).  -->
	<rule ref="rulesets/java/empty.xml"/>
	
	<!-- These rules deal with different problems that can occur with finalizers.  -->
	<rule ref="rulesets/java/finalizers.xml"/>
	
	<!-- These rules deal with different problems that can occur with import statements.  -->
	<rule ref="rulesets/java/imports.xml">
		<exclude name="UnusedImports"/>
	</rule>
	
	<!-- The JavaBeans Ruleset catches instances of bean rules not being followed.  -->
	<rule ref="rulesets/java/javabeans.xml">
		<exclude name="BeanMembersShouldSerialize"/>
	</rule>
	
	<!-- These rules deal with different problems that can occur with JUnit tests.  -->
	<rule ref="rulesets/java/junit.xml">
		<exclude name="JUnitTestContainsTooManyAsserts"/>
		<exclude name="JUnitAssertionsShouldIncludeMessage"/>
		<exclude name="JUnitTestsShouldIncludeAssert"/>
		<exclude name="JUnitSpelling"/>
		<exclude name="TestClassWithoutTestCases"/>
	</rule>
	
	<!-- The Jakarta Commons Logging ruleset contains a collection of rules that find questionable usages of that framework.  -->
	<rule ref="rulesets/java/logging-jakarta-commons.xml">
		<exclude name="GuardLogStatement"/>
	</rule>
	
	<!-- The Java Logging ruleset contains a collection of rules that find questionable usages of the logger.  -->
	<rule ref="rulesets/java/logging-java.xml">
		<exclude name="GuardLogStatementJavaUtil"/>
	</rule>
	
	<!-- The Naming Ruleset contains rules regarding preferred usage of names and identifiers.  -->
	<rule ref="rulesets/java/naming.xml">
		<exclude name="ShortVariable"/>
		<exclude name="LongVariable"/>
	</rule>
	
	<!-- These rules deal with different optimizations that generally apply to best practices.  -->
	<rule ref="rulesets/java/optimizations.xml">
		<exclude name="LocalVariableCouldBeFinal"/>
		<exclude name="MethodArgumentCouldBeFinal"/>
		<exclude name="AvoidInstantiatingObjectsInLoops"/>
	</rule>
	
	<!-- These rules provide some strict guidelines about throwing and catching exceptions.  -->
	<rule ref="rulesets/java/strictexception.xml"/>
	
	<!-- These rules deal with different issues that can arise with manipulation of the String, StringBuffer, or StringBuilder instances.  -->
	<rule ref="rulesets/java/strings.xml"/>
	
	<!-- These rules check the security guidelines from Sun, published at http://java.sun.com/security/seccodeguide.html#gcg  -->
	<rule ref="rulesets/java/sunsecure.xml"/>
	
	<!-- These are rules which resolve java Class files for comparison, as opposed to a String  -->
	<rule ref="rulesets/java/typeresolution.xml">
		<exclude name="UnusedImports"/>
	</rule>
	
	<!-- The Unnecessary Ruleset contains a collection of rules for unnecessary code.  -->
	<rule ref="rulesets/java/unnecessary.xml">
		<!-- The UselessParentheses rule criticizes brackets which are useful for readability  -->
		<exclude name="UselessParentheses"/>
	</rule>
	
	<!-- The Unused Code ruleset contains rules that find unused or ineffective code.  -->
	<rule ref="rulesets/java/unusedcode.xml">
		<exclude name="UnusedPrivateMethod"/>
	</rule>
	
	
	
	
	<!-- ************************************************** -->
	<!-- Deactivate specific rules under certain conditions -->
	<!-- ************************************************** -->
	
	<!-- TooManyStaticImports is deactivated in test classes, so a large number of Matchers is not blamed -->
	<rule ref="rulesets/java/imports.xml/TooManyStaticImports">
		<properties>
			<property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
		</properties>
	</rule>
	<!-- MethodNamingConventions do not apply in test classes, so underscores in test method names are not blamed -->
	<rule ref="rulesets/java/naming.xml/MethodNamingConventions">
		<properties>
			<property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
		</properties>
	</rule>
	<!-- Tests may define inner classes (spring configurations) at the start of the class -->
	<rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass">
		<properties>
			<property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
		</properties>
	</rule>
	<!-- Tests with many test methods should not be considered evil -->
	<rule ref="rulesets/java/codesize.xml/TooManyMethods">
		<properties>
			<property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[ends-with(@Image,'Test')]"/>
			<property name="maxmethods" value="15" />
		</properties>
	</rule>
	
	<!-- This rule should apply to java.sql.Statement. The Gin 'Statement' class does not need to be closed.  -->
	<rule ref="rulesets/java/design.xml/CloseResource">
		<properties>
			<property name="violationSuppressXPath" value="//ClassOrInterfaceType[@Image='Statement']"/>
		</properties>
	</rule>
   
	<!-- Braces for if statements are not required in autmatically generated equals methods -->
	<rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces">
		<properties>
			<property name="violationSuppressXPath" value="//MethodDeclarator[@Image='equals']"/>
		</properties>
	</rule>
   
</ruleset>